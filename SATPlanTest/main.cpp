#include <iostream>

#include <opencv2/opencv.hpp>
#include "inc/MultiAgentSearch.h"


//using namespace z3;
using namespace std;


int main() {

    std::vector<std::vector<int>> pathImg = {
            {0, 0, 1, 1, 1, 1, 1, 1, 1, 1},
            {0, 0, 1, 1, 1, 1, 1, 1, 1, 1},
            {1, 0, 1, 1, 1, 1, 1, 1, 1, 1},
            {1, 0, 1, 1, 1, 0, 1, 1, 1, 1},
            {1, 0, 0, 0, 0, 1, 0, 1, 1, 1},
            {1, 0, 0, 0, 0, 1, 0, 1, 1, 1},
            {1, 1, 1, 1, 0, 0, 0, 1, 1, 1},
            {1, 1, 1, 1, 0, 0, 0, 0, 1, 1},
            {1, 1, 1, 1, 1, 1, 0, 0, 0, 1},
            {1, 1, 1, 1, 1, 1, 1, 0, 0, 0},
    };
    std::vector<std::vector<int>> startVertexs = {
            {0, 0},
            {1, 0},
            {1, 1},
            {0, 1},
            {2, 1},
            {3, 1},
            {4, 1},
            {4, 2},
            {8, 8},
            {9, 9},
            {9, 8},
            {7, 7},
            {8, 7},
            {8, 6},
            {9, 7}};

    std::vector<std::vector<int>> endVertexs = {
            {8, 8},
            {9, 9},
            {9, 8},
            {7, 7},
            {8, 7},
            {8, 6},
            {9, 7},
            {6, 6},
            {0, 0},
            {1, 0},
            {1, 1},
            {0, 1},
            {2, 1},
            {3, 1},
            {4, 1}
    };


//    std::vector<std::vector<int>> pathImg = {
//            {0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1},
//            {0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1},
//            {1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1},
//            {1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1},
//            {1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1},
//            {1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1},
//            {1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1},
//            {1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1},
//            {1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1},
//            {1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0},
//            {1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0},
//            {1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0},
//            {1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0},
//            {1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0},
//            {1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0},
//            {1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0},
//            {1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0},
//            {1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0},
//            {1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0},
//            {1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0},
//            {1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0},
//            {1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0},
//            {1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0},
//            {1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0},
//            {1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0},
//            {1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0},
//            {1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
//            {1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0},
//            {1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0}
//
//    };
//
//
//
////    std::ofstream file("result.txt", std::ios::out);
//
//
//    std::vector<std::vector<int>> startVertexs = {
//            {0, 0},
//            {1, 0},
//            {0, 1},
//            {1, 1},
//            {5, 2},
//            {28, 28},
//            {28, 27},
//            {27, 28},
//            {26, 26},
//            {25, 28},
//    };
//
//    std::vector<std::vector<int>> endVertexs = {
//            {28, 28},
//            {28, 27},
//            {27, 28},
//            {26, 26},
//            {25, 28},
//            {0, 0},
//            {1, 0},
//            {0, 1},
//            {1, 1},
//            {5, 2},
//    };



//    std::vector<std::string> AgentName = {"A"};

//    std::vector<std::string> AgentName = {"A","B","C","D","E"};
    std::vector<std::string> AgentName = {"A","B","C","D","E","F","G","H","I","J"};
//    std::vector<std::string> AgentName = {"A","B","C","D","E","F","G","H","I","J","K","L","M","N","O"};


    std::vector<Agent> Agents;
    for(int agt=0; agt < AgentName.size(); agt++){
        Agents.push_back(Agent(AgentName[agt], startVertexs[agt],endVertexs[agt]));
    }


    MultiAgentSearch multiAgentSearch;

   bool  s = multiAgentSearch.BoolSat(pathImg, Agents);
//    bool  s = multiAgentSearch.LinearSat(pathImg, Agents);

//    if(s){
//        for(int agt=0; agt < Agents.size(); agt++){
//            for(int t = 0; t < multiAgentSearch.timeStep; t++){
//                printf("Agent %s at time %d at (%d,%d)\n",Agents[agt].name.c_str(),t,Agents[agt].path[t][0],Agents[agt].path[t][1]);
////                std::cout<<"Agent "<<Agents[agt].name.c_str()<<" at time "<<t<<" at ("<<Agents[agt].path[t][0].c_str()<<","<<Agents[agt].path[t][1];
//            }
//        }
//
////        cout<<Agents[0].path.size();
//    }


//    (pathImg, Agents)

    int zoom = 30; //缩放倍数

//    for (int x = 0; x < )

//    file.close();

    cv::Mat image = vectorToImage(pathImg);
//    image = ImageResize(image,image.rows * 20, image.cols * 20);

    image = DrawPath(image,Agents,50);

//    cv::resize(image,image,cv::Size(image.cols * 30, image.rows *30),0,0,CV_INTER_AREA);
//
//    cv::imshow("aa",image);
//    cv::waitKey( 0 );
//    cv::destroyWindow( "aa" );
    return 0;
}




